<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Penalty Processing" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\Users\haidewaj\source\repos\FirstProject\FirstProject\bin\Debug\netcoreapp3.1\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Navigating To Penalty Processing Page" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()
var ui=JavaImporter(org.openqa.selenium.support.ui)
var wait=new ui.WebDriverWait(WDS.browser,120)
WDS.browser.get(&apos;https://qacisv5performance.advancedutility.com/Processes/PenaltyPickup?&apos;)
java.lang.Thread.sleep(7000)
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.name(&quot;username&quot;)))
java.lang.Thread.sleep(3000)
WDS.browser.findElement(org.openqa.selenium.By.name(&quot;username&quot;)).sendKeys(&quot;advanced&quot;)
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.name(&quot;password&quot;)))
java.lang.Thread.sleep(3000)
WDS.browser.findElement(org.openqa.selenium.By.name(&quot;password&quot;)).sendKeys(&quot;ciscon4&quot;)
java.lang.Thread.sleep(5000)
WDS.browser.findElement(org.openqa.selenium.By.className(&quot;dx-button-text&quot;)).click()
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.className(&quot;logo&quot;)))
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.xpath(&quot;//h3[text()=&apos;Penalty Processing&apos;]&quot;)))
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.xpath(&quot;//span[@class=&apos;dx-button-text&apos;]&quot;)))
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;dx-first-row dx-first-col dx-last-col dx-field-item dx-col-0 dx-field-item-optional dx-flex-layout dx-label-h-align&apos;]//div[@class=&apos;dx-field-item-content dx-field-item-content-location-right&apos;]//div[@class=&apos;dx-template-wrapper&apos;]//div//div[@title=&apos;Select a custom date using a formula.&apos;]&quot;)))
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;dx-first-row dx-first-col dx-last-col dx-field-item dx-col-0 dx-field-item-optional dx-flex-layout dx-label-h-align&apos;]//div[@class=&apos;dx-field-item-content dx-field-item-content-location-right&apos;]//div[@class=&apos;dx-template-wrapper&apos;]//div//div[@title=&apos;Select a custom date using a formula.&apos;]&quot;)).click()
java.lang.Thread.sleep(7000)
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.xpath(&quot;//span[text()=&apos;Save&apos;]&quot;)))
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//span[text()=&apos;Save&apos;]&quot;)).click()
java.lang.Thread.sleep(7000)
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;dx-first-col dx-last-col dx-field-item dx-col-0 dx-field-item-optional dx-flex-layout dx-label-h-align&apos;]//div[@class=&apos;dx-field-item-content dx-field-item-content-location-right&apos;]//div[@class=&apos;dx-template-wrapper&apos;]//div//div[@title=&apos;Select a custom date using a formula.&apos;]&quot;)))
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;dx-first-col dx-last-col dx-field-item dx-col-0 dx-field-item-optional dx-flex-layout dx-label-h-align&apos;]//div[@class=&apos;dx-field-item-content dx-field-item-content-location-right&apos;]//div[@class=&apos;dx-template-wrapper&apos;]//div//div[@title=&apos;Select a custom date using a formula.&apos;]&quot;)).click()
java.lang.Thread.sleep(7000)
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.xpath(&quot;(//span[text()=&apos;Save&apos;])[2]&quot;)))
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//span[text()=&apos;Save&apos;])[2]&quot;)).click()

wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.xpath(&quot;//div[@title=&apos;Select to include all companies and divisions.&apos;]//span[@class=&apos;dx-checkbox-icon&apos;]&quot;)))
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@title=&apos;Select to include all companies and divisions.&apos;]//span[@class=&apos;dx-checkbox-icon&apos;]&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;dx-show-invalid-badge dx-dropdownbox dx-textbox dx-texteditor dx-show-clear-button dx-dropdowneditor-button-visible dx-editor-outlined dx-widget dx-dropdowneditor dx-dropdowneditor-field-clickable dx-texteditor-empty&apos;]//div[@class=&apos;dx-dropdowneditor-icon&apos;]&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//span[@class=&apos;dx-checkbox-icon&apos;])[6]&quot;)).click()

java.lang.Thread.sleep(7000)
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Penalty Processing" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()
var ui=JavaImporter(org.openqa.selenium.support.ui)
var wait=new ui.WebDriverWait(WDS.browser,900)
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@title=&apos;texts.ui_view_run_tooltip&apos;]//div[@class=&apos;dx-button-content&apos;]&quot;)).click()
wait.until(ui.ExpectedConditions.visibilityOfElementLocated(org.openqa.selenium.By.xpath(&quot;//p[@class=&apos;u-position-absolute&apos;]&quot;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
